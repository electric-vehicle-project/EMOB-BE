/* EMOB-2025 */
package com.example.emob.service;

import com.example.emob.entity.InstallmentPlan;
import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.ClassPathResource;
import org.springframework.mail.MailException;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;

import java.math.BigDecimal;
import java.time.LocalDate;

@Slf4j
@Service
@RequiredArgsConstructor
public class NotificationService {

  private final JavaMailSender mailSender;
  private final TemplateEngine templateEngine;

  public void sendInstallmentCreatedEmail(
          String recipientEmail,
          String cusName,
          BigDecimal totalAmount,
          BigDecimal deposit,
          BigDecimal monthlyAmount,
          int termMonths,
          LocalDate nextDueDate) {

    // Build context cho Thymeleaf
    Context context = new Context();

    // Header section
    context.setVariable("emailTitle", "Th√¥ng b√°o k·∫ø ho·∫°ch tr·∫£ g√≥p");
    context.setVariable("headerIcon", "üìã");
    context.setVariable("headerTitle", "K·∫ø ho·∫°ch tr·∫£ g√≥p ƒë√£ ƒë∆∞·ª£c t·∫°o");
    context.setVariable("headerSubtitle", "Chi ti·∫øt th√¥ng tin tr·∫£ g√≥p c·ªßa b·∫°n");

    // Greeting section
    context.setVariable("greetingText", "Xin ch√†o");
    context.setVariable("customerName", cusName);
    context.setVariable(
            "greetingMessage",
            "K·∫ø ho·∫°ch tr·∫£ g√≥p cho ƒë∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng");

    // Details section
    context.setVariable("detailsTitle", "üìÑ Chi ti·∫øt k·∫ø ho·∫°ch tr·∫£ g√≥p:");
    context.setVariable("labelTotalAmount", "T·ªïng gi√° tr·ªã:");
    context.setVariable("labelDeposit", "Ti·ªÅn ƒë·∫∑t c·ªçc:");
    context.setVariable("labelTermMonths", "Th·ªùi h·∫°n:");
    context.setVariable("labelMonthlyAmount", "S·ªë ti·ªÅn tr·∫£ m·ªói th√°ng:");
    context.setVariable("labelNextDueDate", "K·ª≥ thanh to√°n ƒë·∫ßu ti√™n:");

    // Data values
    context.setVariable("totalAmount", totalAmount);
    context.setVariable("deposit", deposit);
    context.setVariable("monthlyAmount", monthlyAmount);
    context.setVariable("termMonths", termMonths);
    context.setVariable("nextDueDate", nextDueDate);

    // Payment reminder
    context.setVariable(
            "paymentReminder",
            "Qu√Ω kh√°ch vui l√≤ng thanh to√°n ƒë√∫ng h·∫°n ƒë·ªÉ ƒë·∫£m b·∫£o quy·ªÅn l·ª£i c·ªßa m√¨nh. "
            + "N·∫øu ƒë√£ thanh to√°n, vui l√≤ng b·ªè qua email n√†y.");

    // Alert box
    context.setVariable("alertMessage", "Vui l√≤ng thanh to√°n ƒë√∫ng h·∫°n.");
    context.setVariable("hotline", "Hotline 1900 1234");
    context.setVariable("supportEmail", "support@emob.vn");

    // Button
    context.setVariable("buttonText", "Xem chi ti·∫øt ƒë∆°n h√†ng");
    context.setVariable("buttonUrl", "https://emob.vn/my-orders");

    // Footer
    context.setVariable("footerSupportText", "B·∫°n c·∫ßn h·ªó tr·ª£?");
    context.setVariable("footerPhone", "1900 1234");
    context.setVariable("footerEmail", "support@emob.vn");
    context.setVariable("footerCopyright", "¬© 2025 Showroom √î T√¥ EMOB");

    // Render HTML t·ª´ template
    String htmlContent = templateEngine.process("email/installment-plan", context);

    try {
      MimeMessage message = mailSender.createMimeMessage();
      MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");

      helper.setTo(recipientEmail);
      helper.setSubject("Th√¥ng b√°o k·∫ø ho·∫°ch tr·∫£ g√≥p - EMOB");
      helper.setText(htmlContent, true); // true = HTML

      // Add logo inline
      ClassPathResource logoResource = new ClassPathResource("static/images/logo.png");
      helper.addInline("logoImage", logoResource);

      mailSender.send(message);

      log.info("ƒê√£ g·ª≠i email k·∫ø ho·∫°ch tr·∫£ g√≥p th√†nh c√¥ng t·ªõi: {}", recipientEmail);
    } catch (MessagingException e) {
      log.error("L·ªói t·∫°o email: {}", e.getMessage(), e);
      throw new RuntimeException("L·ªói t·∫°o email: " + e.getMessage(), e);
    } catch (MailException e) {
      log.error("L·ªói g·ª≠i email: {}", e.getMessage(), e);
      throw new RuntimeException("L·ªói g·ª≠i email: " + e.getMessage(), e);
    }
  }

  // Overload method ƒë·ªÉ g·ªçi t·ª´ entity Installment
  public void sendInstallmentCreatedEmail(InstallmentPlan installment) {
    sendInstallmentCreatedEmail(
            installment.getSaleOrder().getQuotation().getCustomer().getEmail(),
            installment.getSaleOrder().getQuotation().getCustomer().getFullName(),
            installment.getTotalAmount(),
            installment.getDeposit(),
            installment.getMonthlyAmount(),
            installment.getTermMonths(),
            installment.getNextDueDate());
  }
}