/* EMOB-2025 */
package com.example.emob.service;

import com.example.emob.constant.*;
import com.example.emob.entity.*;
import com.example.emob.exception.GlobalException;
import com.example.emob.mapper.ContractMapper;
import com.example.emob.mapper.PageMapper;
import com.example.emob.model.response.APIResponse;
import com.example.emob.model.response.PageResponse;
import com.example.emob.model.response.saleContract.ContractResponse;
import com.example.emob.repository.CustomerRepository;
import com.example.emob.repository.SaleContractRepository;
import com.example.emob.repository.SaleOrderRepository;
import com.example.emob.service.impl.IContract;
import com.example.emob.util.AccountUtil;
import com.example.emob.util.NotificationHelper;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class ContractService implements IContract {
  @Autowired private PageMapper pageMapper;

  @Autowired private SaleOrderRepository saleOrderRepository;

  @Autowired private ContractMapper contractMapper;

  @Autowired private SaleContractRepository contractRepository;

  @Autowired private EmailService emailService;
  @Autowired private CustomerRepository customerRepository;

  private String generateContractNumber(UUID orderId) {
    String prefix = "HD-" + LocalDate.now().getYear() + "-";
    String suffix = orderId.toString().substring(0, 6).toUpperCase();
    return prefix + suffix;
  }

  private void signContract(String toEmail, String cusName) {
    emailService.sendEmail(
        "K√Ω H·ª£p ƒê·ªìng Th√†nh C√¥ng",
        "K√Ω H·ª£p ƒê·ªìng Th√†nh C√¥ng",
        "C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† l·ª±a ch·ªçn d·ªãch v·ª• c·ªßa ch√∫ng t√¥i",
        NotificationHelper.SIGN_CONTRACT,
        "Ch√∫ng t√¥i xin th√¥ng b√°o r·∫±ng h·ª£p ƒë·ªìng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k√Ω k·∫øt th√†nh c√¥ng.",
        "",
        "H·ª£p ƒë·ªìng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v√† l∆∞u tr·ªØ an to√†n trong h·ªá th·ªëng. B·ªô ph·∫≠n chƒÉm s√≥c"
            + " kh√°ch h√†ng s·∫Ω s·ªõm li√™n h·ªá ƒë·ªÉ h∆∞·ªõng d·∫´n c√°c b∆∞·ªõc ti·∫øp theo.",
        "Vui l√≤ng ki·ªÉm tra email c·ªßa b·∫°n ƒë·ªÉ xem chi ti·∫øt h·ª£p ƒë·ªìng v√† th√¥ng tin thanh to√°n.",
        cusName,
        "Xem chi ti·∫øt h·ª£p ƒë·ªìng",
        toEmail);
  }

  @Override
  @Transactional
  public APIResponse<ContractResponse> createContract(SaleOrder saleOrder) {
    // üîπ 1. Ki·ªÉm tra h·ª£p l·ªá
    if (saleOrder == null) {
      throw new GlobalException(ErrorCode.INVALID_CODE, "Sale order not found");
    }
    if (saleOrder.getContract() != null) {
      throw new GlobalException(ErrorCode.INVALID_CODE, "This order already has a contract");
    }

    // üîπ 2. T·∫°o ƒë·ªëi t∆∞·ª£ng h·ª£p ƒë·ªìng
    SaleContract contract = new SaleContract();
    contract.setContractNumber(generateContractNumber(saleOrder.getId()));
    contract.setCreateAt(LocalDateTime.now());
    contract.setStatus(ContractStatus.PENDING);
    contract.setSaleOrder(saleOrder);
    contract.setTotalPrice(saleOrder.getTotalPrice());
    contract.setTotalQuantity(saleOrder.getTotalQuantity());
    if (saleOrder.getVatAmount() != null) {
      contract.setVatAmount(saleOrder.getVatAmount());
    }
    contract.setAccount(AccountUtil.getCurrentUser());

    // üîπ 3. Map t·ª´ SaleOrderItem ‚Üí SaleContractItem (d√πng mapper)
    Set<SaleContractItem> contractItems = saleOrder.getSaleOrderItems().stream().filter(vri -> !vri.isDeleted()) // b·ªè qua item b·ªã x√≥a
                 .map(vri -> {
                   SaleContractItem item = new SaleContractItem();
                   item.setUnitPrice(vri.getUnitPrice());
                   item.setTotalPrice(vri.getTotalPrice());
                   item.setDiscountPrice(BigDecimal.ZERO);
                   item.setQuantity(vri.getQuantity());
                   item.setColor(vri.getColor());
                   item.setVehicleStatus(vri.getVehicleStatus());
                   item.setVehicle(vri.getVehicle()); // ƒë·∫£m b·∫£o vehicle ƒë√£ managed
                   item.setSaleContract(contract);
                   // T·∫°o vehicleUnits ri√™ng cho item, kh√¥ng share v·ªõi item kh√°c
                   item.getVehicleUnits().forEach((unit) -> {
                     unit.setSaleContractItem(item);
                   });
                   return item;
                 })
                 .collect(Collectors.toSet());
    System.out.println("Items count: " + contractItems.size());
    contractItems.forEach(i -> System.out.println(i));
    contract.setSaleContractItems(contractItems);
    saleOrder.setContract(contract);
    // üîπ 4. L∆∞u h·ª£p ƒë·ªìng
    SaleContract savedContract = contractRepository.save(contract);

    // üîπ 5. Map sang response
    ContractResponse response = contractMapper.toContractResponse(savedContract);

    return APIResponse.success(response, "Contract created successfully");
  }

  @Override
  @PreAuthorize("hasAnyRole('EVM_STAFF', 'DEALER_STAFF')")
  public APIResponse<Void> cancelContract(UUID id) {
    SaleContract contract =
        contractRepository
            .findById(id)
            .filter((item) -> item.getStatus().equals(ContractStatus.PENDING))
            .orElseThrow(() -> new GlobalException(ErrorCode.NOT_FOUND));
    contract.setStatus(ContractStatus.TERMINATED);
    contractRepository.save(contract);
    return APIResponse.error(200, "Cancel contract successfully");
  }

  @Override
  @PreAuthorize("hasAnyRole('EVM_STAFF', 'DEALER_STAFF')")
  public APIResponse<ContractResponse> signContract(LocalDate date, UUID contractId) {
    // sign contract ch∆∞a check role
    SaleContract contract =
        contractRepository
            .findById(contractId)
            .filter((item) -> item.getStatus().equals(ContractStatus.PENDING))
            .orElseThrow(() -> new GlobalException(ErrorCode.NOT_FOUND));
    contract.setStatus(ContractStatus.SIGNED);

    if (contract.getSaleOrder().getQuotation() != null) {
      String email = contract.getSaleOrder().getQuotation().getCustomer().getEmail();
      String cusName = contract.getSaleOrder().getQuotation().getCustomer().getFullName();
      contract.getSaleContractItems()
              .forEach(item -> item.getVehicleUnits()
                      .forEach(unit -> unit.setPurchaseDate(LocalDateTime.now())));
      signContract(email, cusName);
    }
    contract.setSignDate(date);
    contractRepository.save(contract);
    ContractResponse contractResponse = contractMapper.toContractResponse(contract);
    return APIResponse.success(contractResponse, "Signed contract successfully");
  }

  // ===========================================
  // üîπ 1. H√£ng xe xem t·∫•t c·∫£ h·ª£p ƒë·ªìng c·ªßa ƒë·∫°i l√Ω
  // ===========================================
  @Override
  @PreAuthorize("hasAnyRole('EVM_STAFF', 'ADMIN')")
  public APIResponse<PageResponse<ContractResponse>> getAllContractsOfDealers(
      String keyword, List<ContractStatus> statuses, Pageable pageable) {
    Page<SaleContract> page =
        contractRepository.findAllWithVehicleRequest(statuses, keyword, pageable);
    PageResponse<ContractResponse> response =
        pageMapper.toPageResponse(page, contractMapper::toContractResponse);
    return APIResponse.success(response);
  }

  // ===========================================
  // üîπ 2. Kh√°ch h√†ng xem h·ª£p ƒë·ªìng c·ªßa ch√≠nh m√¨nh
  // ===========================================
  @Override
  @PreAuthorize("hasAnyRole('DEALER_STAFF', 'MANAGER')")
  public APIResponse<PageResponse<ContractResponse>> getAllContractsOfCurrentCustomer(
      UUID customerId, String keyword, List<ContractStatus> statuses, Pageable pageable) {
    Dealer dealer = AccountUtil.getCurrentUser().getDealer();
    Customer customer =
        customerRepository
            .findById(customerId)
            .orElseThrow(() -> new GlobalException(ErrorCode.NOT_FOUND, "Customer not found"));

    Page<SaleContract> page =
        contractRepository.findAllWithQuotationByDealerAndStatuses(
            dealer, customer, statuses, keyword, pageable);

    PageResponse<ContractResponse> response =
        pageMapper.toPageResponse(page, contractMapper::toContractResponse);
    return APIResponse.success(response);
  }

  // ===========================================
  // üîπ 3. ƒê·∫°i l√Ω xem h·ª£p ƒë·ªìng c·ªßa m√¨nh
  // ===========================================
  @Override
  @PreAuthorize("hasAnyRole('DEALER_STAFF', 'MANAGER')")
  public APIResponse<PageResponse<ContractResponse>> getAllContractsOfCurrentDealer(
      String keyword, List<ContractStatus> statuses, Pageable pageable) {
    Dealer dealer = AccountUtil.getCurrentUser().getDealer();
    Page<SaleContract> page =
        contractRepository.findAllWithVehicleRequestByDealerAndStatuses(
            dealer, statuses, keyword, pageable);
    PageResponse<ContractResponse> response =
        pageMapper.toPageResponse(page, contractMapper::toContractResponse);
    return APIResponse.success(response);
  }

  // ===========================================
  // üîπ 4. ƒê·∫°i l√Ω xem h·ª£p ƒë·ªìng c·ªßa kh√°ch h√†ng c·ªßa m√¨nh
  // ===========================================
  @Override
  @PreAuthorize("hasAnyRole('DEALER_STAFF', 'MANAGER')")
  public APIResponse<PageResponse<ContractResponse>> getAllContractsByCustomer(
      String keyword, List<ContractStatus> statuses, Pageable pageable) {
    Dealer dealer = AccountUtil.getCurrentUser().getDealer();
    Page<SaleContract> page =
        contractRepository.findAllWithQuotationByDealerAndCustomerAndStatuses(
            dealer, statuses, keyword, pageable);
    PageResponse<ContractResponse> response =
        pageMapper.toPageResponse(page, contractMapper::toContractResponse);
    return APIResponse.success(response);
  }

  // ===========================================
  // üîπ 5. L·∫•y chi ti·∫øt 1 h·ª£p ƒë·ªìng
  // ===========================================
  @Override
  public APIResponse<ContractResponse> getContractById(UUID contractId) {
    SaleContract contract =
        contractRepository
            .findById(contractId)
            .orElseThrow(() -> new GlobalException(ErrorCode.NOT_FOUND, "Contract not found"));
    return APIResponse.success(contractMapper.toContractResponse(contract));
  }
}
